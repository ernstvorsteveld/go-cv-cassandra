// Package cv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cv

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all experiences
	// (GET /experiences)
	ListExperiences(c *gin.Context, params ListExperiencesParams)
	// Create an experience
	// (POST /experiences)
	CreateExperience(c *gin.Context)
	// Info for a specific experience
	// (GET /experiences/{id})
	GetExperienceById(c *gin.Context, id string)
	// Metrics
	// (GET /metrics)
	Metrics(c *gin.Context)
	// List all tags
	// (GET /tags)
	ListTags(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListExperiences operation middleware
func (siw *ServerInterfaceWrapper) ListExperiences(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperiencesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListExperiences(c, params)
}

// CreateExperience operation middleware
func (siw *ServerInterfaceWrapper) CreateExperience(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateExperience(c)
}

// GetExperienceById operation middleware
func (siw *ServerInterfaceWrapper) GetExperienceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperienceById(c, id)
}

// Metrics operation middleware
func (siw *ServerInterfaceWrapper) Metrics(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Metrics(c)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTags(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/experiences", wrapper.ListExperiences)
	router.POST(options.BaseURL+"/experiences", wrapper.CreateExperience)
	router.GET(options.BaseURL+"/experiences/:id", wrapper.GetExperienceById)
	router.GET(options.BaseURL+"/tags", wrapper.ListTags)
	router.GET(options.BaseURL+"/metrics", wrapper.Metrics)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
