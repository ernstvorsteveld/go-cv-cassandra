// Package experiences provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package experiences

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all experiences
	// (GET /experiences)
	ListExperiences(c *gin.Context, params ListExperiencesParams)
	// Create an experience
	// (POST /experiences)
	CreateExperience(c *gin.Context)
	// Info for a specific experience
	// (GET /experiences/{id})
	GetExperienceById(c *gin.Context, id string)
	// List all tags
	// (GET /tags)
	ListTags(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListExperiences operation middleware
func (siw *ServerInterfaceWrapper) ListExperiences(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperiencesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListExperiences(c, params)
}

// CreateExperience operation middleware
func (siw *ServerInterfaceWrapper) CreateExperience(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateExperience(c)
}

// GetExperienceById operation middleware
func (siw *ServerInterfaceWrapper) GetExperienceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperienceById(c, id)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTags(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/experiences", wrapper.ListExperiences)
	router.POST(options.BaseURL+"/experiences", wrapper.CreateExperience)
	router.GET(options.BaseURL+"/experiences/:id", wrapper.GetExperienceById)
	router.GET(options.BaseURL+"/tags", wrapper.ListTags)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
